[ { "title": "LaTeX", "url": "/posts/latex/", "categories": "工具", "tags": "mocOS, LaTeX, MiKTeX, VS Code", "date": "2022-07-03 16:31:13 +0800", "snippet": "配置环境安装MiKTeX从MiKTeX官网下载MiKTeX打开MiKTeX，检查更新，为个人安装宏包 不要使用为系统安装，因为每次打开MiKTeX都是默认以个人的方式打开，同时可以避免无法下载一些宏包的问题。将MiKTeX -&amp;gt; 设置 -&amp;gt; 常规 -&amp;gt; 宏包安装 -&amp;gt; 自动（即时）安装缺失的宏包设置为总是将~/bin添加到终端的环境变量PATH中，运行echo export &#39;PATH=~/bin:$PATH&#39; &amp;gt;&amp;gt; ~/.zshrc 个人目录下的.zshrc是zsh的配置文件。如果使用bash，bash的配置文件是~/.bash_profile将~/bin添加到图形界面应用的环境变量PATH中，运行sudo launchctl config user path &quot;$HOME/bin:$PATH&quot;配置VS Code在VS Code中安装LaTeX Workshop插件将VS Code -&amp;gt; Settings -&amp;gt; Extensions -&amp;gt; LaTeX -&amp;gt; Latex-workshop -&amp;gt; Latex -&amp;gt; Auto Build: Run设置为onFileChange将VS Code -&amp;gt; Settings -&amp;gt; Text Editor -&amp;gt; Editor: Word Wrap设置为on在$\\LaTeX$文档中使用中文在VS Code中，打开所有命令：⌘ + ⇧ + P搜索settings，点击Preferences: Open Settings (JSON)在settings.json的字典最后添加latex的工具和recipes，添加后的settings.json内容如下：{ ... // 上面是已有的内容，注意可能需要在上面的最后一项后添加一个英文逗号 &quot;latex-workshop.latex.tools&quot;: [ { &quot;name&quot;: &quot;latexmk&quot;, &quot;command&quot;: &quot;/Users/xiefangyuan/bin/latexmk&quot;, &quot;args&quot;: [ &quot;-synctex=1&quot;, &quot;-interaction=nonstopmode&quot;, &quot;-file-line-error&quot;, &quot;-pdf&quot;, &quot;%DOC%&quot; ] }, { &quot;name&quot;: &quot;xelatex&quot;, &quot;command&quot;: &quot;/Users/xiefangyuan/bin/xelatex&quot;, &quot;args&quot;: [ &quot;-output-directory=./out&quot;, &quot;-synctex=1&quot;, &quot;-interaction=nonstopmode&quot;, &quot;-file-line-error&quot;, &quot;%DOC%&quot; ] }, { &quot;name&quot;: &quot;pdflatex&quot;, &quot;command&quot;: &quot;/Users/xiefangyuan/bin/pdflatex&quot;, &quot;args&quot;: [ &quot;-output-directory=./out&quot;, &quot;-synctex=1&quot;, &quot;-interaction=nonstopmode&quot;, &quot;-file-line-error&quot;, &quot;%DOC%&quot; ] }, { &quot;name&quot;: &quot;bibtex&quot;, &quot;command&quot;: &quot;/Users/xiefangyuan/bin/bibtex&quot;, &quot;args&quot;: [ &quot;out/%DOCFILE%&quot; ] } ], &quot;latex-workshop.latex.recipes&quot;: [ //支持中英文（Unicode）编译 { &quot;name&quot;: &quot;UnicodeBib&quot;, &quot;tools&quot;: [ &quot;xelatex&quot;, &quot;bibtex&quot;, &quot;xelatex&quot;, &quot;xelatex&quot;, ] }, { &quot;name&quot;: &quot;Unicode&quot;, &quot;tools&quot;: [ &quot;xelatex&quot;, ] }, //支持英文（ASCII）编译 { &quot;name&quot;: &quot;ASCII&quot;, &quot;tools&quot;: [ &quot;pdflatex&quot;, ] }, { &quot;name&quot;: &quot;ASCIIBib&quot;, &quot;tools&quot;: [ &quot;pdflatex&quot;, &quot;bibtex&quot;, &quot;pdflatex&quot;, &quot;pdflatex&quot;, ] }, ], &quot;latex-workshop.latex.recipe.default&quot;: &quot;ASCIIBib&quot;, &quot;latex-workshop.latex.outDir&quot;: &quot;%DIR%/out&quot;,}如果出现类似Does the executable exist? PATH: ...的错误，&quot;command&quot;的值使用完整的路径名。解决类似ctex/fontset/ctex-fontset-macnew.def:99: Package fontspec Error: The font &quot;Kaiti SC &quot; cannot be found.的错误：对于macOS 12.1，Kaiti.ttc存放在/System/Library/AssetsV2/com_apple_MobileAsset_Font7，于是在~/Library/Application Support/MiKTeX/texmfs/config/fontconfig/config/localfonts2.conf中添加该目录，添加后：&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&amp;lt;fontconfig&amp;gt;&amp;lt;dir&amp;gt;/System/Library/AssetsV2/com_apple_MobileAsset_Font7&amp;lt;/dir&amp;gt;&amp;lt;/fontconfig&amp;gt;在.tex文件中，将文档的类型设置为ctexart，ctexrep，ctexbook或ctexbeamer，如：\\documentclass{ctexart}。$\\LaTeX$基础 _ __ __________ ______ | |/ // _/ ____/ / ____/___ _____ ____ ___ ____ ______ _____ | / / // __/ / /_ / __ `/ __ \\/ __ `/ / / / / / / __ `/ __ \\ / |_/ // /___ / __/ / /_/ / / / / /_/ / /_/ / /_/ / /_/ / / / //_/|_/___/_____/ /_/ \\__,_/_/ /_/\\__, /\\__, /\\__,_/\\__,_/_/ /_/ /____//____/ " }, { "title": "打包和发布Python包到PyPI", "url": "/posts/PyPI/", "categories": "工具", "tags": "PyPI, Python", "date": "2022-06-01 23:30:57 +0800", "snippet": "目录结构project-name├── LICENSE.txt├── README.md├── pyproject.toml├── setup.py├── src│   └── package-name│      ├── __init__.py│      ├── file1.py│      ├── package1│      │   └── ...│      └── ...└── tests ├── __init__.py ├── test_file1.py ├── test_package1   │   └── ... └── ...project-name和package-name不需要相同，打包发布使用的是package-name，tests文件夹用于测试，不会被打包发布。pyproject.toml[build-system]requires = [&quot;setuptools&amp;gt;=62.0.0&quot;, &quot;wheel&quot;]build-backend = &quot;setuptools.build_meta&quot;[project]name = &quot;package-name&quot;version = &quot;2022.6.0&quot;description = &quot;Package description.&quot;readme = &quot;README.md&quot;authors = [ { name = &quot;author-name&quot;, email = &quot;author-email&quot; }]license = { file = &quot;LICENSE.txt&quot; }classifiers = [ &quot;Programming Language :: Python :: 3.10&quot;, &quot;Operating System :: OS Independent&quot;, &quot;License :: OSI Approved :: MIT License&quot;,]keywords = [ &quot;keyword1&quot;, &quot;keyword2&quot;,]dependencies = []requires-python = &quot;&amp;gt;=3.10&quot;[project.urls]Homepage = &quot;https://xxx&quot;[tool.bumpver]current_version = &quot;2022.6.0&quot;version_pattern = &quot;YYYY.MM.PATCH&quot;commit_message = &quot;Bump version {old_version} -&amp;gt; {new_version}&quot;commit = truetag = truepush = true[tool.bumpver.file_patterns]&quot;pyproject.toml&quot; = [ &#39;current_version = &quot;{version}&quot;&#39;, &#39;version = &quot;{version}&quot;&#39;,]&quot;README.md&quot; = [ &quot;{version}&quot;,]&quot;src/comperm/__init__.py&quot; = [ &quot;{version}&quot;,]setup.pyfrom setuptools import setupsetup()src/package-name/__init__.py# Version of the package.__version__ = &#39;2022.6.0&#39;tests/__init__.pyimport osimport sysfor directory in [&#39;src&#39;, &#39;tests&#39;]: sys.path.append(os.path.join(sys.path[0], directory))版本号管理安装bumpver：pip install bumpver初始化版本，之后在pyproject.toml做适当修改：bumpver init预览版本号更新：bumpver update --patch --dry更新版本号：bumpver update --patch可编辑安装以可编辑模式从本地源代码安装：pip install -e .实际上是创建了一个链接。安装之后可以另外创建一个项目，导入该包进行测试，源代码发生修改后可直接测试最新的代码。构建和发布安装build和twine：pip install build twine生成.tar.gz和.wheel文件到dist/：python -m build检查渲染的PyPI描述页面：twine check dist/*注册PyPI和TestPyPI账号，分别添加令牌，在$HOME目录下创建.pypirc文件：nano ~/.pypirc在~/.pypirc中写入：[pypi] username = __token__ password = pypi-xxxxxxxx[testpypi] username = __token__ password = pypi-xxxxxxxx发布到TestPyPI发布Python包到TestPyPI进行测试：twine upload -r testpypi dist/* 从TestPyPI安装：pip install -i https://test.pypi.org/simple/ package-name卸载Python包：pip uninstall package-name发布到PyPI正式发布到PyPI：twine upload dist/*从PyPI安装：pip install package-name _ __ __________ ______ | |/ // _/ ____/ / ____/___ _____ ____ ___ ____ ______ _____ | / / // __/ / /_ / __ `/ __ \\/ __ `/ / / / / / / __ `/ __ \\ / |_/ // /___ / __/ / /_/ / / / / /_/ / /_/ / /_/ / /_/ / / / //_/|_/___/_____/ /_/ \\__,_/_/ /_/\\__, /\\__, /\\__,_/\\__,_/_/ /_/ /____//____/ " }, { "title": "使用Chirpy主题在GitHub搭建个人主页", "url": "/posts/chirpy/", "categories": "工具", "tags": "macOS, Chirpy, Jekyll, GitHub", "date": "2022-01-27 23:20:12 +0800", "snippet": "配置Ruby环境安装XCode时会附带安装Command Line Tools；如果没有安装XCode，单独安装Command Line Tools：xcode-select --install设置SDKROOT，否则会安装Jekyll失败，该变量只作用于当前终端窗口：export SDKROOT=$(xcrun --show-sdk-path)安装Ruby版本管理工具rbenv：brew install rbenv启动rbenv：rbenv init根据提示，为了在每次启动终端窗口时自动加载rbenv，可以在~/.zshrc中添加eval &quot;$(rbenv init - zsh)&quot;：echo &#39;\\n# ruby\\neval &quot;$(rbenv init - zsh)&quot;&#39; &amp;gt;&amp;gt; ~/.zshrc安装Ruby（2.5.0 &amp;lt;= Ruby &amp;lt; 3.1.0），这里安装3.0.3版本：rbenv install 3.0.3设置Ruby 3.0.3为全局的Ruby：rbenv global 3.0.3查看全局的Ruby版本：ruby -v检查是否安装成功：curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash安装Jekyll和bundler：gem install --user-install bundler jekyll查看Jekyll版本：jekyll -v构建网站在GitHub上从Chirpy Starter创建一个public仓库，命名为xie-fangyuan.github.io（必须是GitHub用户名.github.io，不区分大小写）。克隆新建的仓库到本地：git clone https://github.com/Xie-Fangyuan/xie-fangyuan.github.io.git安装chirpy所需的gem：cd xie-fangyuan.github.iobundle install将_config.yml中对应的参数进行如下修改：# 查看语言编码：http://www.lingoes.net/en/translator/langcode.htmlang: zh# 查看时区编码：http://www.timezoneconverter.com/cgi-bin/findzone/findzonetimezone: Asia/Chongqingtitle: Fangyuan Xietagline: Like a Swift, Like a Python.github: username: Xie-Fangyuansocial: name: Fangyuan Xie email: xie.fangyuan@foxmail.com links: - https://github.com/xie-fangyuanimg_cdn: &#39;https://github.com/Xie-Fangyuan/xie-fangyuan.github.io/blob/main&#39;avatar: &#39;/assets/img/favicons/favicon.jpg?raw=true&#39;在.gitignore添加Gemfile.lock（当使用非Linux系统时，如果不在.gitignore中添加该行，需要使用bundle lock --add-platform x86_64-linux更新平台信息）。删除browserconfig.xml和site.webmanifest。使用Real Favicon Generator生成网站图标，最好使用背景透明的图像。下载生成的文件夹，将其他图片文件放入assets/img/favicons/中，并在其中添加一张favicon.jpg作为网站上显示的头像。在项目根目录下添加并用nano编辑器打开README.md文件：nano README.md在README.md中添加以下内容：# XIÈ Fāng-yuán&#39;s GitHub PagesHi there!👋Welcome to visit [XIÈ Fāng-yuán](https://xie-fangyuan.github.io)&#39;s GitHub Pages.项目根目录下添加_posts/文件夹，在_posts文件夹中添加博客文件，命名格式为YYYY-MM-DD-title.md，在YYYY-MM-DD-title.md中编辑内容。启动本地服务器，在本地预览网站效果，不包含_drafts/中的内容：bundle exec jekyll s如果要在本地预览包含_drafts/在内的博客：bundle exec jekyll s --drafts部署网站确保.github/workflows/pages-deploy.yml存在，且其中的on.push.branches为仓库的默认分支名；确保tools/deploy.sh存在。提交更新：git acm &#39;initial commit&#39; git acm是git add . &amp;amp;&amp;amp; git commit -m&#39;的别名，可通过git config --global alias.acm &#39;!git add . &amp;amp;&amp;amp; git commit -m&#39;进行设置。将本地仓库同步到GitHub：git push一段时间后，GitHub会为仓库生成一个gh-pages分支，在仓库的Settings -&amp;gt; Pages中修改source的分支为gh-pages，保存，通过https://xie-fangyuan.github.io访问网站。每次更新博客后，提交更新，并将本地仓库同步到GitHub，一段时间后网站会自动更新。一些有意思的网站 狗屁不通文章生成器 网站图片生成 网站图标自动获取 ASCII文本生成器 ASCII图案 _ __ __________ ______ | |/ // _/ ____/ / ____/___ _____ ____ ___ ____ ______ _____ | / / // __/ / /_ / __ `/ __ \\/ __ `/ / / / / / / __ `/ __ \\ / |_/ // /___ / __/ / /_/ / / / / /_/ / /_/ / /_/ / /_/ / / / //_/|_/___/_____/ /_/ \\__,_/_/ /_/\\__, /\\__, /\\__,_/\\__,_/_/ /_/ /____//____/ " }, { "title": "nano编辑器", "url": "/posts/nano/", "categories": "工具", "tags": "macOS, nano", "date": "2022-01-26 19:16:51 +0800", "snippet": "安装nanozsh自带了nano，但是版本较低，在mac自带的终端安装最新版nano，不要使用iTerm2。从nano官网复制最新版下载链接，下载nano：cd ~/Downloadswget https://www.nano-editor.org/dist/v6/nano-6.0.tar.gz解压：tar -xzvf nano-6.0.tar.gz编译安装：cd nano-6.0./configuresudo makesudo make install删除安装包：cd ..rm nano-6.0.tar.gzrm -r nano-6.0查看nano版本是否是最新版：nano -V新建~/.nanorc文件，写入以下内容：# highlight syntaxinclude &quot;/usr/local/share/nano/*.nanorc&quot;include &quot;/usr/local/share/nano/extra/*.nanorc&quot;# show line numbersset linenumbersnano实用快捷键 选择多行：按住shift再按上下键 复制：option + 6 剪切：ctrl + k 粘贴从nano复制或剪切的内容：ctrl + u 撤销：option + u 重做：option + e 保存：ctrl + s 退出：ctrl + x 跳到行首：ctrl + a 跳到行尾：ctrl + e 跳到文件开头：option + \\ 跳到文件结尾：option + / 上一页：ctrl + y 下一页：ctrl + v 注释：option + 3 _ __ __________ ______ | |/ // _/ ____/ / ____/___ _____ ____ ___ ____ ______ _____ | / / // __/ / /_ / __ `/ __ \\/ __ `/ / / / / / / __ `/ __ \\ / |_/ // /___ / __/ / /_/ / / / / /_/ / /_/ / /_/ / /_/ / / / //_/|_/___/_____/ /_/ \\__,_/_/ /_/\\__, /\\__, /\\__,_/\\__,_/_/ /_/ /____//____/ " }, { "title": "zsh实用命令", "url": "/posts/zsh/", "categories": "工具", "tags": "macOS, zsh", "date": "2021-12-11 00:04:09 +0800", "snippet": "文件系统关于目录/表示根目录，~表示个人用户目录，.表示当前工作目录，..表示上一级目录，zsh中...表示上一级目录的上一级目录，以此类推。pwdprint working directory，查看工作目录的绝对路径：在个人目录下查看工作目录的绝对路径：pwd，输出：/Users/userNamelslist directory contents，查看一个目录下的文件和文件夹： 查看工作目录下所有显式文件和文件夹的名称：ls 查看工作目录下的java/目录下的所有文件和文件夹的名称（包括隐藏文件）：ls -a java 查看工作目录下所有文件和文件夹的详细信息（包括隐藏文件，长格式）：l或ls -al或ls -a -l或ls -l -acdchange directory，改变工作目录： 改变工作目录为python/目录：cd python 改变工作目录为个人目录：cd或cd ~ 改变工作目录为根目录下的usr/bin/目录：cd /usr/binmkdirmake directories，创建目录： 创建一个名为python/的目录：mkdir python 分别创建名为swift/和cpp/的目录：mkdir swift cpp 创建一个多级目录java/src/：mkdir -p java/srcrmdirremove directories，删除空目录： 删除python/空目录：rmdir python 删除swift/和cpp/空目录：rmdir swift cpp 删除java/src/空目录，如果删除src/后java/为空，则递归删除java/，否则java/不被删除：rmdir -p java/srcdiffdifferences，比较两个文件或两个文件夹的内容： 比较两个文件的内容：diff file1.py file2.java 比较两个文件夹的内容：diff folder2 folder2touch改变文件的访问权限和修改时间，常用于创建新文件：分别创建名为file1.py和file2.java的文件：touch file1.py file2.javacatconcatenate，拼接多个文件并显示内容，常用于显示一个文件的内容： 显示一个文件的内容：cat file1.py 拼接三个文件的内容并显示：cat file1.py file2.java file3.cppccat高亮显示文件内容，需要运行brew install ccat进行安装高亮显示file.py的内容：ccat file.pyhead显示文件开始的指定行数的内容：head file.pytail显示文件结尾的指定行数的内容：tail file.pywc显示文件的行数、单词数和字符数： 显示文件的行数、单词数和字符数：wc file.py 显示文件的行数：wc -l file.pyopen打开文件或文件夹： 使用默认编辑器打开文件：open file.py 指定应用程序打开文件夹：open folder -a Visual\\ Studio\\ Codemvmove，移动文件或文件夹： 将文件file.py移动到python/目录下：mv file.py python，如果python/目录不存在，则会把file.py重命名为python，依然是文件 将文件夹src/移动到java/目录下：mv src java，如果java/目录不存在，则会把src/重命名为java/ 将文件file1.py重命名为file2.py：mv file2.py file2.pycpcopy，复制文件或文件夹： 复制文件file1.py为python/目录下的file2.py：cp file1.py python/file2.py 复制文件夹folder1为folder2：cp -r folder1 folder2rmremove，删除文件或文件夹： 删除多个文件：rm file1.py file2.java 删除多个目录：rm -r folder1 folder2/folder3 强制删除文件：rm -f file.pylnlink，创建连接： 创建一个硬连接：ln file.py file 创建一个符号连接：ln -s file.py filefind通过匹配表达式查找文件和文件夹查找工作目录下所有以.py结尾的文件和文件夹：find *.pyfile查看文件类型： file file.py输出file.py: ASCII text file file.docx输出file.docx: Microsoft Word 2007+dudisk usage，查看磁盘的使用情况 查看工作目录下每个文件夹的磁盘使用情况，包括所有内层文件夹，以B，K，M，G的形式显示：du -h 查看工作目录下每个文件的磁盘使用情况，包括所有内层文件，以B，K，M，G的形式显示：du -ahdfdisplay free，显示空闲的磁盘空间大小以B，K，M，G的形式显示空闲的磁盘大小：df -h重定向 将输出重定向到文件，覆盖写：echo hello &amp;gt; test.txt 将输出重定向到文件，追加写：echo hello &amp;gt;&amp;gt; test.txt安全passwdpassword，修改用户密码修改用户userName的密码：passwd userNamechmodchange modes，改变文件的模式或访问权限表 修改文件file.py的权限为所有者可读可写可执行，组群可读可执行，其他用户可读可执行：chmod 755 file.py或chmod u=rwx,go=rx file.py或chmod u=rwx,go=r-w file.py 清除所有者以外的人对文件file.py的所有权限：chmod file.py go=进程psprocess status，查看当前所有进程的状态查看当前所有进程的状态：ps ukill终止进程（无法捕获，无法忽略）：kill -9 PID日期和时间calcalendar，查看日历 查看本月日历：cal 查看指定年份的日历：cal 2008 查看指定年份和月份的日历：cal 4 2008或cal 04 2008date查看当前日期和时间：datetime显示一条命令运行时间：time ls工具manmanual，查看一条命令的使用手册： 查看ls的使用手册：man ls 甚至可以查看man的使用手册：man manunameunix name，显示操作系统的信息：uname -aenvenvironment，设置环境和执行命令，打印环境：显示所有环境变量：envarcharchitecture，显示计算机的架构类型：archarchey显示系统的概览信息，需要运行brew install archey进行安装：archeywho显示当前登录的所有用户：显示当前登录的所有用的详细信息：who -aw显示当前登录的所有用户和动作：wid显示当前用户的详细信息：idwhere查找可执行程序的位置：查找所有python的位置：where pythonwhich定位一个可执行程序的位置：定位python的位置：which pythonalias给一个命令取别名：给python3取一个别名python：alias python=python3unalias删除别名删除别名python：unalias pythonclear清空终端内容：clearhistory列出执行过的命令和编号：historychshchange shell，修改默认shell修改默认shell为zsh：chsh -s /bin/zshsay将文本转化为语音让计算机读出hello world：say hello worldwget下载文件从网页下载文件：wget https://xxx/xx.png中断后继续下载：wget -c https://xxx/xx.png快捷键 ctrl+a跳到行首，ctrl+e跳到行尾 ctrl+w删除后面的一个单词，ctrl+u删除当前行，ctrl+k删除本行光标后的内容 ctrl+y撤销2中的删除 _ __ __________ ______ | |/ // _/ ____/ / ____/___ _____ ____ ___ ____ ______ _____ | / / // __/ / /_ / __ `/ __ \\/ __ `/ / / / / / / __ `/ __ \\ / |_/ // /___ / __/ / /_/ / / / / /_/ / /_/ / /_/ / /_/ / / / //_/|_/___/_____/ /_/ \\__,_/_/ /_/\\__, /\\__, /\\__,_/\\__,_/_/ /_/ /____//____/ " }, { "title": "iTerm2", "url": "/posts/iTerm2/", "categories": "工具", "tags": "macOS, iTerm2, zsh", "date": "2021-12-06 13:08:25 +0800", "snippet": "安装iTerm2 在iTerm2官网复制最新版的下载链接，下载最新版iTerm2到~/Downloads/： wget https://iterm2.com/downloads/stable/iTerm2-3_4_14.zip -P ~/Downloads 解压安装iTerm2到/Applications/，安装完成后删除安装包： unzip -q ~/Downloads/iTerm2-3_4_14.zip -d /Applications/ &amp;amp;&amp;amp; rm -f iTerm2-3_4_14.zip 将zsh设置为默认shell： chsh -s /bin/zsh 安装oh-my-zsh安装on-my-zsh：sh -c &quot;$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;或sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; 更新oh-my-zsh：omz update安装一些插件：zsh-autosuggestions用于自动建议终端命令。git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestionszsh-syntax-highlighting用于对终端命令进行语法高亮显示。git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlightingautojump用于在文件系统中更快地跳转。brew install autojump根据安装完成后的提示，将[ -f /opt/homebrew/etc/profile.d/autojump.sh ] &amp;amp;&amp;amp; . /opt/homebrew/etc/profile.d/autojump.sh添加到~/.zshrc中。extract（已自带）用于解压各类压缩包。colored-man-pages（已自带）用于高亮显示手册。powerlevel10k一个流行的zsh主题。git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k安装完所有插件后，在~/.zshrc中修改ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;；在plugins中添加zsh-autosuggestions zsh-syntax-highlighting extract colored-man-pages，以空白符（空格，制表符或换行符等）分割。更新~/.zshrc 如果之前使用bash，那么将~/.bash_profile的内容合并到~/.zshrc中。 执行~/.zshrc： source ~/.zshrc ~/.zshrc在更新之后需要执行才能起作用。 如果安装powerlevel10k，则按提示下载Meslo Nerd Font并根据个人喜好配置powerlevel10k。 若下载失败，运行p10k configure重新下载。 或者手动下载Meslo Nerd Font，下载完成后双击每个文件进行安装，在iTerm2 -&amp;gt; Preference -&amp;gt; Profiles -&amp;gt; Text中，将Font设为MesloLGS NF，再运行p10k configure并在第一步选no，之后根据个人喜好配置powerlevel10k。 以后还可以运行p10k configure修改powerlevel10k配置。 打开~/.p10k.zsh文件，在1649行左右，修改时间格式为typeset -g POWERLEVEL9K_TIME_FORMAT=&#39;%D{%F %T %a %Z}&#39;。主题 下载喜欢的iTerm2主题 Preference -&amp;gt; Profiles -&amp;gt; Colors -&amp;gt; Color Presets中导入下载的主题。修改设置根据个人喜欢修改iTerm2的设置 Appearance -&amp;gt; General中： 将Theme设为Minimal。 Preference -&amp;gt; Profiles -&amp;gt; General中： 将Title设为Session Name和Job Name with Arguments。 将Icon设为Built-in icon for Current App。 Preference -&amp;gt; Profiles -&amp;gt; Colors -&amp;gt; Color Presets中： 将Color Presets设为JetBrains Darcula。 选中Cursor guide。 Preference -&amp;gt; Profiles -&amp;gt; Text中： 选中Vertical bar和Blinking cursor。 Preference -&amp;gt; Profiles -&amp;gt; Window中： 将Transparency设为15。 选中Keep background colors opaque和Blur。 将Blur设为5。 将Style设为Maximized。 将Screen设为Screen with Cursor。 Preference -&amp;gt; Profiles -&amp;gt; Terminal中： 选中Unlimited scrollback。 Preference -&amp;gt; Profiles -&amp;gt; Session中： 选中Status bar enabled。 点击Configure Status Bar，点击Advanced，选中Prefer tight packing to stable positioning。 将Auto-Rainbow设置为Automatic。 在Active Components中依次加入Spring，CPU Utilization，FIxed-size Spacer，FIxed-size Spacer，Memory Utilization，FIxed-size Spacer，FIxed-size Spacer，Network Utilization。 Preference -&amp;gt; Profiles -&amp;gt; Keys -&amp;gt; General中： 将Left Option key设为Esc+。 Advanced -&amp;gt; Mouse中： 将Scroll wheel sends arrow keys when in alternate screen mode选中设置为yes。 iTerm2 -&amp;gt; Make iTerm2 Default term iTerm2 -&amp;gt; Install Shell Integration -&amp;gt; continue -&amp;gt; Download and Run Installer连接服务器 在~/.ssh/新建文件server_login，写入用户名，服务器的ip地址，登录密码： #!/usr/bin/expect -f set user yourUserName set host 000.000.000.000 set port 22 set password xxxxxxxx set timeout -1 spawn ssh $user@$host expect &quot;*password:*&quot; send &quot;$password\\n&quot; interact Preference -&amp;gt; Profiles -&amp;gt; General中，新建Profile，命名为server，在Send text at start写入expect ~/.ssh/server_login。 之后可以直接打开server自动连接服务器。 _ __ __________ ______ | |/ // _/ ____/ / ____/___ _____ ____ ___ ____ ______ _____ | / / // __/ / /_ / __ `/ __ \\/ __ `/ / / / / / / __ `/ __ \\ / |_/ // /___ / __/ / /_/ / / / / /_/ / /_/ / /_/ / /_/ / / / //_/|_/___/_____/ /_/ \\__,_/_/ /_/\\__, /\\__, /\\__,_/\\__,_/_/ /_/ /____//____/ " } ]
